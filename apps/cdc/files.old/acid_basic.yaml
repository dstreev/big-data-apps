# This process will generate several datasets to exhibit an
# incremental load process.  The data will be loaded passthrough
# various methods to show and contrast the efforts.

- hosts: sdlc
  vars:
    mr_data_util_bin: https://github.com/dstreev/iot-data-utility/releases/download/R3.0_beta3/mr-data-utility-3.0-SNAPSHOT-shaded.jar
    gen_mappers: 20
    # This need to be 2x higher than the possible
    # terminate control output for the range specified.
    gen_count: 1000000000
    # Controls which scenario we're running
    set: 3
    hive_connect_url: jdbc:hive2://{{ zookeeper_server }}:2181/;serviceDiscoveryMode=zooKeeper;zooKeeperNamespace=hiveserver2
    # hive_connect_url: jdbc:hive2://{{ zookeeper_server }}:2181/;serviceDiscoveryMode=zooKeeper;zooKeeperNamespace={{ hs2_zk_path }}

  become: true
  # become_user: '{{ user }}'

  tasks:
    - name: Create bin directory
      shell: mkdir -p /home/{{ user }}/datagen
      become: true

    - name: Set Local home permissions
      shell: chown -R {{ user }}:{{ user }} /home/{{ user }}

    - name: Copy over the library for the data generator
      get_url:
        url: '{{ mr_data_util_bin }}'
        dest: /home/{{ user }}/datagen/mr-data-utility.jar
        mode: 0750
        owner: '{{ user }}'

    - name: Copy over the data generator control file
      copy:
        src: files/acid_gen_{{ set }}.yaml
        dest: /home/{{ user }}/datagen/acid_gen_{{ set }}.yaml
        mode: 0750
        owner: '{{ user }}'

    - name: Copy over the data generator script
      copy:
        src: files/acid_datagen.sh
        dest: /home/{{ user }}/datagen/acid_datagen.sh
        mode: 0750
        owner: '{{ user }}'

    - name: Copy over the acid.ddl
      copy:
        src: files/acid_{{ set }}.ddl
        dest: /home/{{ user }}/datagen/acid_{{ set }}.ddl
        mode: 0750
        owner: '{{ user }}'

    - name: Copy over the acid_init
      copy:
        src: files/acid_init.sh
        dest: /home/{{ user }}/datagen/acid_init.sh
        mode: 0750
        owner: '{{ user }}'

    - name: Copy over the acid_basic
      copy:
        src: files/acid_basic.sh
        dest: /home/{{ user }}/datagen/acid_basic.sh
        mode: 0750
        owner: '{{ user }}'

    - name: Copy over the acid_scenario
      copy:
        src: files/acid_scenario_{{ set }}.sql
        dest: /home/{{ user }}/datagen/acid_scenario_{{ set }}.sql
        mode: 0750
        owner: '{{ user }}'

    - name:                    Hive Private User Databases
      uri:
        url:                   '{{ ranger_url_base }}/service/public/v2/api/policy'
        body_format:           json
        body:
          '{
            "isEnabled":       true,
            "service":         "{{ cluster_name }}_hive",
            "name":            "ACID Testing - ALL Users",
            "description":     "Private User Database Access",
            "isAuditEnabled":  true,
            "resources":       {
              "database":      {
                "values":      ["acid_{USER}"],
                "isExcludes":  false,
                "isRecursive": false
              },
              "column":        {
                "values":      ["*"],
                "isExcludes":  false,
                "isRecursive": false
              },
              "table":         {
                "values":      ["*"],
                "isExcludes":  false,
                "isRecursive": false
              }
            },
            "policyItems":     [{
              "accesses":      [{
                "type":        "select",
                "isAllowed":   true
              }, {
                "type":        "update",
                "isAllowed":   true
              }, {
                "type":        "create",
                "isAllowed":   true
              }, {
                "type":        "drop",
                "isAllowed":   true
              }, {
                "type":        "alter",
                "isAllowed":   true
              }, {
                "type":        "index",
                "isAllowed":   true
              }, {
                "type":        "lock",
                "isAllowed":   true
              }, {
                "type":        "all",
                "isAllowed":   true
              }, {
                "type":        "read",
                "isAllowed":   true
              }, {
                "type":        "write",
                "isAllowed":   true
              }, {
                "type":        "repladmin",
                "isAllowed":   true
              }, {
                "type":        "serviceadmin",
                "isAllowed":   true
              }],
              "users":         ["{USER}"],
              "groups":        [],
              "conditions":    [],
              "delegateAdmin": false
            }]
          }'
        method:                POST
        user:                  '{{ ranger_admin_user }}'
        password:              '{{ ranger_admin_password }}'
        force_basic_auth:      yes
        # Added 400 Status Code. If policy exists, this return code is given.
        # Inclusion here makes it an acceptable return.
        status_code:           200,400
        headers:
          Content-Type:        "application/json; charset=utf8"
          X-XSRF-HEADER:       "valid"
          User-Agent:          "Ansible HDP Best Practices"

    - name: Run the Acid Init script
      shell: /home/{{ user }}/datagen/acid_init.sh -cfg acid_gen_{{ set }}.yaml -o /user/{{ user }}/datasets/external/acid_raw -m {{ gen_mappers }} -c {{ gen_count }} -s {{ set }} --hive_user {{ user }} --hive_user_pw {{ user_pw }} --hive_connect_url "{{ hive_connect_url }}"
      become: true
      become_user: '{{ user }}'

    - name: Run the Acid Basic script
      shell: /home/{{ user }}/datagen/acid_basic.sh -cfg acid_gen_{{ set }}.yaml -o /user/{{ user }}/datasets/external/acid_raw -m {{ gen_mappers }} -c {{ gen_count }} -s {{ set }} --hive_user {{ user }} --hive_user_pw {{ user_pw }} --hive_connect_url "{{ hive_connect_url }}"
      become: true
      become_user: '{{ user }}'
